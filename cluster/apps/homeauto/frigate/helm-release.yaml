---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: frigate
  namespace: homeauto
spec:
  timeout: 10m
  interval: 5m
  chart:
    spec:
      chart: frigate
      version: 7.0.1
      sourceRef:
        kind: HelmRepository
        name: frigate-charts
        namespace: flux-system
  values:
    strategyType: Recreate
    image:
      repository: ghcr.io/blakeblackshear/frigate
      tag: 0.12.0
      pullPolicy: IfNotPresent

    # -- additional ENV variables to set. Prefix with FRIGATE_ to target Frigate configuration values
    env: { }
    # TZ: UTC

    # -- set environment variables from Secret(s)
    envFromSecrets: [ ]
    # secrets are required before `helm install`
    # - frigate-rstp-credentials

    coral:
      # -- enables the use of a Coral device
      enabled: true
      # -- path on the host to which to mount the Coral device
      hostPath: /dev/bus/usb


    # -- declare extra volumes to use for Frigate
    extraVolumes: [ ]
    # -- declare additional volume mounts
    extraVolumeMounts: [ ]

    # -- amount of shared memory to use for caching
    shmSize: 1Gi

    # nameOverride -- Overrides the name of resources
    nameOverride: ""

    # fullnameOverride -- Overrides the Full Name of resources
    fullnameOverride: ""

    # -- frigate configuration - see [Docs](https://docs.frigate.video/configuration/index) for more info
    config: |
      mqtt:
        # Required: host name
        host: mosquitto.homeauto
        # Optional: port (default: shown below)
        port: 1883
        # Optional: topic prefix (default: shown below)
        # WARNING: must be unique if you are running multiple instances
        topic_prefix: frigate
        # Optional: client id (default: shown below)
        # WARNING: must be unique if you are running multiple instances
        client_id: frigate
        # Optional: user
        user: ${MQTT_USERNAME}
        # Optional: password
        # NOTE: Environment variables that begin with 'FRIGATE_' may be referenced in {}.
        #       eg. password: '{FRIGATE_MQTT_PASSWORD}'
        password: ${MQTT_PASSWORD}
        # Optional: interval in seconds for publishing stats (default: shown below)
        stats_interval: 60
      detectors:
         coral:
           type: edgetpu
           device: usb
       cameras:
         front_door:
           ffmpeg:
             inputs:
               - path: rtsp://{FRIGATE_RSTP_USERNAME}:{FRIGATE_RTSP_PASSWORD}@10.0.10.10:554/cam/realmonitor?channel=1&subtype=2
                 roles:
                   - detect
                   - rtmp
           width: 1280
           height: 720
           fps: 5

    # Probes configuration
    probes:
      liveness:
        enabled: true
        initialDelaySeconds: 30
        failureThreshold: 5
        timeoutSeconds: 10
      readiness:
        enabled: true
        initialDelaySeconds: 30
        failureThreshold: 5
        timeoutSeconds: 10
      startup:
        enabled: false
        failureThreshold: 30
        periodSeconds: 10

    service:
      # -- Type of Service to use
      type: ClusterIP
      # -- Port the Service should communicate on
      port: 5000
      ## Specify the nodePort value for the LoadBalancer and NodePort service types.
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
      ##
      # nodePort:
      ## Provide any additional annotations which may be required. This can be used to
      ## set the LoadBalancer service type to internal only.
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
      ##
      annotations: { }
      labels: { }

      # -- Set specific IP address for LoadBalancer. `service.type` must be set to `LoadBalancer`
      loadBalancerIP:

      # loadBalancerSourceRanges: []
      ## Set the externalTrafficPolicy in the Service to either Cluster or Local
      # externalTrafficPolicy: Cluster


    persistence:
      data:
        enabled: true
        existingClaim: nfs-data-frigate-claim


    # -- Set resource limits/requests for the Pod(s)
    resources: { }
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      #   gpu.intel.com/i915: 1
      # requests:
      #   cpu: 100m
    #   memory: 128Mi
    #   gpu.intel.com/i915: 1

    # -- Set Security Context
    securityContext: { }
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
    # runAsUser: 1000
    # privileged: true

    # -- Node Selector configuration
    nodeSelector:
      hasHomeAssistantUSB: "true"

    # -- Node toleration configuration
    tolerations: [ ]

    # -- Set Pod affinity rules
    affinity: { }

    # -- Set additonal pod Annotations
    podAnnotations: { }
